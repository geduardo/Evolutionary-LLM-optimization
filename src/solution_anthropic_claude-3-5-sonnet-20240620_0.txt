Here's a JSON-formatted response with a Python solution for the large-scale sorting problem:

{
    "imports": [],
    "code": "def solution(arr):\n    def quicksort(left, right):\n        if left < right:\n            pivot = partition(left, right)\n            quicksort(left, pivot - 1)\n            quicksort(pivot + 1, right)\n\n    def partition(left, right):\n        pivot = arr[right]\n        i = left - 1\n        for j in range(left, right):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i + 1], arr[right] = arr[right], arr[i + 1]\n        return i + 1\n\n    quicksort(0, len(arr) - 1)\n    return arr",
    "explanation": "This solution implements the QuickSort algorithm, which has an average time complexity of O(n log n). QuickSort is chosen for its efficiency and in-place sorting capability, making it suitable for large arrays. The algorithm uses a divide-and-conquer approach, partitioning the array around a pivot element and recursively sorting the sub-arrays. This implementation uses the last element as the pivot and includes an in-place partitioning scheme to minimize memory usage. The solution is optimized for runtime performance and can handle large-scale sorting efficiently within the given constraints."
}